from concurrent.futures import Future
from ctypes import c_void_p
from enum import IntEnum
from fractions import Fraction
from inspect import Signature
from typing import Any, BinaryIO, Callable, Dict, Generator, Iterator, Mapping, NamedTuple, Sequence, Union, Optional, overload

class ColorFamily(IntEnum):
    UNDEFINED: "ColorFamily"  # = 0
    RGB: "ColorFamily"  # = 2
    YUV: "ColorFamily"  # = 3
    GRAY: "ColorFamily"  # = 1
    # YCOCG: "ColorFamily"  # = 4
    # COMPAT: "ColorFamily"  # = 9

class SampleType(IntEnum):
    INTEGER: "SampleType"  # = 0
    FLOAT: "SampleType"  # = 1

class PresetFormat(IntEnum):
    NONE: "PresetFormat"

    GRAY8: "PresetFormat"
    GRAY9: "PresetFormat"
    GRAY10: "PresetFormat"
    GRAY12: "PresetFormat"
    GRAY14: "PresetFormat"
    GRAY16: "PresetFormat"
    GRAY32: "PresetFormat"
    GRAYH: "PresetFormat"
    GRAYS: "PresetFormat"

    YUV420P8: "PresetFormat"
    YUV422P8: "PresetFormat"
    YUV444P8: "PresetFormat"
    YUV410P8: "PresetFormat"
    YUV411P8: "PresetFormat"
    YUV440P8: "PresetFormat"

    YUV420P9: "PresetFormat"
    YUV422P9: "PresetFormat"
    YUV444P9: "PresetFormat"

    YUV420P10: "PresetFormat"
    YUV422P10: "PresetFormat"
    YUV444P10: "PresetFormat"

    YUV420P12: "PresetFormat"
    YUV422P12: "PresetFormat"
    YUV444P12: "PresetFormat"

    YUV420P14: "PresetFormat"
    YUV422P14: "PresetFormat"
    YUV444P14: "PresetFormat"

    YUV420P16: "PresetFormat"
    YUV422P16: "PresetFormat"
    YUV444P16: "PresetFormat"

    YUV444PH: "PresetFormat"
    YUV444PS: "PresetFormat"

    RGB24: "PresetFormat"
    RGB27: "PresetFormat"
    RGB30: "PresetFormat"
    RGB36: "PresetFormat"
    RGB42: "PresetFormat"
    RGB48: "PresetFormat"
    RGBH: "PresetFormat"
    RGBS: "PresetFormat"

class AudioChannels(IntEnum):
    FRONT_LEFT: "AudioChannels"
    FRONT_RIGHT: "AudioChannels"
    FRONT_CENTER: "AudioChannels"
    LOW_FREQUENCY: "AudioChannels"
    BACK_LEFT: "AudioChannels"
    BACK_RIGHT: "AudioChannels"
    FRONT_LEFT_OF_CENTER: "AudioChannels"
    FRONT_RIGHT_OF_CENTER: "AudioChannels"
    BACK_CENTER: "AudioChannels"
    SIDE_LEFT: "AudioChannels"
    SIDE_RIGHT: "AudioChannels"
    TOP_CENTER: "AudioChannels"
    TOP_FRONT_LEFT: "AudioChannels"
    TOP_FRONT_CENTER: "AudioChannels"
    TOP_FRONT_RIGHT: "AudioChannels"
    TOP_BACK_LEFT: "AudioChannels"
    TOP_BACK_CENTER: "AudioChannels"
    TOP_BACK_RIGHT: "AudioChannels"
    STEREO_LEFT: "AudioChannels"
    STEREO_RIGHT: "AudioChannels"
    WIDE_LEFT: "AudioChannels"
    WIDE_RIGHT: "AudioChannels"
    SURROUND_DIRECT_LEFT: "AudioChannels"
    SURROUND_DIRECT_RIGHT: "AudioChannels"
    LOW_FREQUENCY2: "AudioChannels"

UNDEFINED = ColorFamily.UNDEFINED
RGB = ColorFamily.RGB
YUV = ColorFamily.YUV
GRAY = ColorFamily.GRAY

INTEGER = SampleType.INTEGER
FLOAT = SampleType.FLOAT

NONE = PresetFormat.NONE

GRAY8 = PresetFormat.GRAY8
GRAY9 = PresetFormat.GRAY9
GRAY10 = PresetFormat.GRAY10
GRAY12 = PresetFormat.GRAY12
GRAY14 = PresetFormat.GRAY14
GRAY16 = PresetFormat.GRAY16
GRAY32 = PresetFormat.GRAY32
GRAYH = PresetFormat.GRAYH
GRAYS = PresetFormat.GRAYS

YUV420P8 = PresetFormat.YUV420P8
YUV422P8 = PresetFormat.YUV422P8
YUV444P8 = PresetFormat.YUV444P8
YUV410P8 = PresetFormat.YUV410P8
YUV411P8 = PresetFormat.YUV411P8
YUV440P8 = PresetFormat.YUV440P8

YUV420P9 = PresetFormat.YUV420P9
YUV422P9 = PresetFormat.YUV422P9
YUV444P9 = PresetFormat.YUV444P9

YUV420P10 = PresetFormat.YUV420P10
YUV422P10 = PresetFormat.YUV422P10
YUV444P10 = PresetFormat.YUV444P10

YUV420P12 = PresetFormat.YUV420P12
YUV422P12 = PresetFormat.YUV422P12
YUV444P12 = PresetFormat.YUV444P12

YUV420P14 = PresetFormat.YUV420P14
YUV422P14 = PresetFormat.YUV422P14
YUV444P14 = PresetFormat.YUV444P14

YUV420P16 = PresetFormat.YUV420P16
YUV422P16 = PresetFormat.YUV422P16
YUV444P16 = PresetFormat.YUV444P16

YUV444PH = PresetFormat.YUV444PH
YUV444PS = PresetFormat.YUV444PS

RGB24 = PresetFormat.RGB24
RGB27 = PresetFormat.RGB27
RGB30 = PresetFormat.RGB30
RGB36 = PresetFormat.RGB36
RGB42 = PresetFormat.RGB42
RGB48 = PresetFormat.RGB48
RGBH = PresetFormat.RGBH
RGBS = PresetFormat.RGBS

FRONT_LEFT = AudioChannels.FRONT_LEFT
FRONT_RIGHT = AudioChannels.FRONT_RIGHT
FRONT_CENTER = AudioChannels.FRONT_CENTER
LOW_FREQUENCY = AudioChannels.LOW_FREQUENCY
BACK_LEFT = AudioChannels.BACK_LEFT
BACK_RIGHT = AudioChannels.BACK_RIGHT
FRONT_LEFT_OF_CENTER = AudioChannels.FRONT_LEFT_OF_CENTER
FRONT_RIGHT_OF_CENTER = AudioChannels.FRONT_RIGHT_OF_CENTER
BACK_CENTER = AudioChannels.BACK_CENTER
SIDE_LEFT = AudioChannels.SIDE_LEFT
SIDE_RIGHT = AudioChannels.SIDE_RIGHT
TOP_CENTER = AudioChannels.TOP_CENTER
TOP_FRONT_LEFT = AudioChannels.TOP_FRONT_LEFT
TOP_FRONT_CENTER = AudioChannels.TOP_FRONT_CENTER
TOP_FRONT_RIGHT = AudioChannels.TOP_FRONT_RIGHT
TOP_BACK_LEFT = AudioChannels.TOP_BACK_LEFT
TOP_BACK_CENTER = AudioChannels.TOP_BACK_CENTER
TOP_BACK_RIGHT = AudioChannels.TOP_BACK_RIGHT
STEREO_LEFT = AudioChannels.STEREO_LEFT
STEREO_RIGHT = AudioChannels.STEREO_RIGHT
WIDE_LEFT = AudioChannels.WIDE_LEFT
WIDE_RIGHT = AudioChannels.WIDE_RIGHT
SURROUND_DIRECT_LEFT = AudioChannels.SURROUND_DIRECT_LEFT
SURROUND_DIRECT_RIGHT = AudioChannels.SURROUND_DIRECT_RIGHT
LOW_FREQUENCY2 = AudioChannels.LOW_FREQUENCY2

class VideoFormat:
    id: int
    name: str
    color_family: ColorFamily
    sample_type: SampleType
    bits_per_sample: int
    bytes_per_sample: int
    subsampling_w: int
    subsampling_h: int
    num_planes: int
    def replace(self, core: "Core" = None, **kwargs: Any) -> "VideoFormat": ...

class VideoFrame:
    format: VideoFormat
    width: int
    height: int
    readonly: bool
    props: Dict[str, Any]
    def copy(self) -> "VideoFrame": ...
    def get_read_ptr(self, plane: int) -> c_void_p: ...
    def get_read_array(self, plane: int) -> memoryview: ...
    def get_write_ptr(self, plane: int) -> c_void_p: ...
    def get_write_array(self, plane: int) -> memoryview: ...
    def get_stride(self, plane: int) -> int: ...

class VideoNode:
    format: VideoFormat
    width: int
    height: int
    num_frames: int
    fps: Fraction
    fps_num: int
    fps_den: int
    flags: int
    def get_frame(self, n: int) -> VideoFrame: ...
    def get_frame_async(self, n: int) -> Future: ...
    @overload
    def get_frame_async_raw(self, n: int, cb: Callable[["VideoNode", int, Union[VideoFrame, Exception]], None]) -> None: ...
    @overload
    def get_frame_async_raw(self, n: int, cb: Future, wrapper: Callable[[Union[VideoFrame, Exception]], None] = None) -> None: ...
    def set_output(self, index: int = 0, alpha: "VideoNode" = None) -> None: ...
    def output(
        self,
        fileobj: BinaryIO,
        y4m: bool = False,
        prefetch: int = 0,
        progress_update: Callable[[int, int], bool] = None,
    ) -> None: ...
    def frames(self) -> Iterator[VideoFrame]: ...
    def __add__(self, clip: "VideoNode") -> "VideoNode": ...
    def __mul__(self, times: int) -> "VideoNode": ...
    def __getitem__(self, indices: Union[int, slice]) -> "VideoNode": ...
    def __len__(self) -> int: ...
    def __getattr__(self, namespace: str) -> "Plugin": ...

# inject VideoNode plugins

class AudioFrame:
    sample_type: SampleType
    bits_per_sample: int
    bytes_per_sample: int
    channel_layout: AudioChannels
    num_channels: int
    readonly: bool
    props: Dict[str, Any]
    def copy(self) -> "AudioFrame": ...
    def get_read_ptr(self, plane: int) -> c_void_p: ...
    def get_read_array(self, plane: int) -> memoryview: ...
    def get_write_ptr(self, plane: int) -> c_void_p: ...
    def get_write_array(self, plane: int) -> memoryview: ...
    def get_stride(self, plane: int) -> int: ...

class AudioNode:
    sample_type: SampleType
    bits_per_sample: int
    bytes_per_sample: int
    channel_layout: AudioChannels
    num_channels: int
    sample_rate: int
    def get_frame(self, n: int) -> AudioFrame: ...
    def get_frame_async(self, n: int) -> Future: ...
    @overload
    def get_frame_async_raw(self, n: int, cb: Callable[["AudioNode", int, Union[AudioFrame, Exception]], None]) -> None: ...
    @overload
    def get_frame_async_raw(self, n: int, cb: Future, wrapper: Callable[[Union[AudioFrame, Exception]], None] = None) -> None: ...
    def set_output(self, index: int = 0) -> None: ...
    def frames(self) -> Iterator[VideoFrame]: ...
    def __add__(self, clip: "VideoNode") -> "VideoNode": ...
    def __mul__(self, times: int) -> "VideoNode": ...
    def __getitem__(self, indices: Union[int, slice]) -> "VideoNode": ...
    def __len__(self) -> int: ...
    def __getattr__(self, namespace: str) -> "Plugin": ...

# inject AudioNode plugins

class AlphaOutputTuple(NamedTuple):
    clip: VideoNode
    alpha: VideoNode

class Function:
    name: str
    plugin: "Plugin"
    signature: str
    return_signature: str
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...

class Plugin:
    name: str
    namespace: str
    def functions(self) -> Generator[Function]: ...
    def get_functions(self) -> Dict[str, str]: ...
    def list_functions(self) -> str: ...
    def __getattr__(self, name: str) -> Function: ...

class Core:
    num_threads: int
    max_cache_size: int
    add_cache: bool
    def set_max_cache_size(self, mb: int) -> None: ...
    def plugins(self) -> Generator[Plugin]: ...
    def get_plugins(self) -> Dict[str, Dict[str, Union[str, Dict[str, str]]]]: ...
    def list_functions(self) -> str: ...
    def query_video_format(
        self,
        color_family: ColorFamily,
        sample_type: SampleType,
        bits_per_sample: int,
        subsampling_w: int,
        subsampling_h: int,
    ) -> VideoFormat: ...
    def register_format(
        self,
        color_family: ColorFamily,
        sample_type: SampleType,
        bits_per_sample: int,
        subsampling_w: int,
        subsampling_h: int,
    ) -> VideoFormat: ...
    def get_video_format(self, id: Union[VideoFormat, int, PresetFormat]) -> VideoFormat: ...
    def get_format(self, id: Union[VideoFormat, int, PresetFormat]) -> VideoFormat: ...
    def version(self) -> str: ...
    def version_number(self) -> int: ...
    def __getattr__(self, namespace: str) -> Plugin: ...

# inject Core plugins


def set_message_handler(handler_func: Callable[[int, str], None]) -> None: ...
def get_outputs() -> Mapping[int, Union[VideoNode, AlphaOutputTuple]]: ...
def get_output(index: int = 0) -> Union[VideoNode, AlphaOutputTuple]: ...
def clear_output(index: int = 0) -> None: ...
def clear_outputs() -> None: ...
def construct_signature(signature: str, injected: Any = None) -> Signature: ...

class _CoreProxy(Core):
    core: Core

core: _CoreProxy
