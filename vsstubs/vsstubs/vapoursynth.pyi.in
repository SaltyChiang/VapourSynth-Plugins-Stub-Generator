from ctypes import c_void_p
from inspect import Signature
from fractions import Fraction
from types import MappingProxyType
from typing import Any, BinaryIO, Callable, Dict, Iterator, List, NamedTuple, Sequence, Set, Tuple, Union, overload
from concurrent.futures import Future
from enum import IntEnum

class ColorFamily(IntEnum):
    GRAY = 1000000
    RGB = 2000000
    YUV = 3000000
    YCOCG = 4000000
    COMPAT = 9000000
    UNDEFINED = 0

GRAY = ColorFamily.GRAY
RGB = ColorFamily.RGB
YUV = ColorFamily.YUV
YCOCG = ColorFamily.YCOCG
COMPAT = ColorFamily.COMPAT

class PresetFormat(IntEnum):
    NONE = 0
    GRAY8 = 1000010
    GRAY16 = 1000011
    GRAYH = 1000012
    GRAYS = 1000013
    YUV420P8 = 3000010
    YUV422P8 = 3000011
    YUV444P8 = 3000012
    YUV410P8 = 3000013
    YUV411P8 = 3000014
    YUV440P8 = 3000015
    YUV420P9 = 3000016
    YUV422P9 = 3000017
    YUV444P9 = 3000018
    YUV420P10 = 3000019
    YUV422P10 = 3000020
    YUV444P10 = 3000021
    YUV420P12 = 3000027
    YUV422P12 = 3000028
    YUV444P12 = 3000029
    YUV420P14 = 3000030
    YUV422P14 = 3000031
    YUV444P14 = 3000032
    YUV420P16 = 3000022
    YUV422P16 = 3000023
    YUV444P16 = 3000024
    YUV444PH = 3000025
    YUV444PS = 3000026
    RGB24 = 2000010
    RGB27 = 2000011
    RGB30 = 2000012
    RGB48 = 2000013
    RGBH = 2000014
    RGBS = 2000015
    COMPATBGR32 = 9000010
    COMPATYUY2 = 9000011

NONE = PresetFormat.NONE
GRAY8 = PresetFormat.GRAY8
GRAY16 = PresetFormat.GRAY16
GRAYH = PresetFormat.GRAYH
GRAYS = PresetFormat.GRAYS
YUV420P8 = PresetFormat.YUV420P8
YUV422P8 = PresetFormat.YUV422P8
YUV444P8 = PresetFormat.YUV444P8
YUV410P8 = PresetFormat.YUV410P8
YUV411P8 = PresetFormat.YUV411P8
YUV440P8 = PresetFormat.YUV440P8
YUV420P9 = PresetFormat.YUV420P9
YUV422P9 = PresetFormat.YUV422P9
YUV444P9 = PresetFormat.YUV444P9
YUV420P10 = PresetFormat.YUV420P10
YUV422P10 = PresetFormat.YUV422P10
YUV444P10 = PresetFormat.YUV444P10
YUV420P12 = PresetFormat.YUV420P12
YUV422P12 = PresetFormat.YUV422P12
YUV444P12 = PresetFormat.YUV444P12
YUV420P14 = PresetFormat.YUV420P14
YUV422P14 = PresetFormat.YUV422P14
YUV444P14 = PresetFormat.YUV444P14
YUV420P16 = PresetFormat.YUV420P16
YUV422P16 = PresetFormat.YUV422P16
YUV444P16 = PresetFormat.YUV444P16
YUV444PH = PresetFormat.YUV444PH
YUV444PS = PresetFormat.YUV444PS
RGB24 = PresetFormat.RGB24
RGB27 = PresetFormat.RGB27
RGB30 = PresetFormat.RGB30
RGB48 = PresetFormat.RGB48
RGBH = PresetFormat.RGBH
RGBS = PresetFormat.RGBS
COMPATBGR32 = PresetFormat.COMPATBGR32
COMPATYUY2 = PresetFormat.COMPATYUY2

class SampleType(IntEnum):
    INTEGER = 0
    FLOAT = 1

INTEGER = SampleType.INTEGER
FLOAT = SampleType.FLOAT

class VapourSynthVersion(NamedTuple):
    release_major: int
    release_minor: int

__version__: VapourSynthVersion

class VapourSynthAPIVersion(NamedTuple):
    api_major: int
    api_minor: int

__api_version__: VapourSynthAPIVersion

class EnvironmentData:
    def __init__(self):
        raise RuntimeError("Cannot directly instantiate this class.")

class EnvironmentPolicy:
    def on_policy_registered(self, special_api):
        pass
    def on_policy_cleared(self):
        pass
    def get_current_environment(self):
        raise NotImplementedError
    def set_environment(self, environment: EnvironmentData):
        raise NotImplementedError
    def is_active(self, environment: EnvironmentData):
        raise NotImplementedError

class StandaloneEnvironmentPolicy:
    def __init__(self):
        raise RuntimeError("Cannot directly instantiate this class.")
    def on_policy_registered(self, api: EnvironmentPolicyAPI) -> None: ...
    def on_policy_cleared(self) -> None: ...
    def get_current_environment(self) -> EnvironmentData: ...
    def set_environment(self, environment: EnvironmentData) -> None: ...
    def is_alive(self, environment: EnvironmentData) -> bool: ...

class EnvironmentPolicyAPI:
    def __init__(self):
        raise RuntimeError("Cannot directly instantiate this class.")
    def wrap_environment(self, environment_data: EnvironmentData) -> Environment: ...
    def create_environment(self) -> EnvironmentData: ...
    def unregister_policy(self) -> None: ...
    def __repr__(self) -> str: ...

def register_policy(policy: EnvironmentPolicy): ...
def has_policy() -> bool: ...

class _FastManager:
    def __init__(self):
        raise RuntimeError("Cannot directly instantiate this class.")
    def __enter__(self) -> None: ...
    def __exit__(self, *_) -> None: ...

class Environment:
    env: EnvironmentData
    alive: bool
    single: bool
    active: bool
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def is_single(self) -> bool: ...
    def env_id(self) -> int: ...
    def copy(self) -> Environment: ...
    def use(self) -> _FastManager: ...
    def __enter__(self) -> Environment: ...
    def __exit__(self, *_) -> None: ...
    def __eq__(self, other: Environment) -> bool: ...
    def __repr__(self) -> str: ...

def vpy_current_environment() -> Environment: ...
def get_current_environment() -> Environment: ...
def construct_signature(signature: str, injected: Union[VideoNode, AudioNode] = None) -> Signature: ...

class AlphaOutputTuple(NamedTuple):
    clip: VideoNode
    alpha: VideoNode

class Error(Exception):
    def __init__(self, value: str) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

def set_message_handler(handler_func: Callable[[int, str], None]) -> None: ...
def clear_output(index: int = 0) -> None: ...
def clear_outputs() -> None: ...
def get_outputs() -> MappingProxyType[int, AlphaOutputTuple]: ...
def get_output(index: int = 0) -> AlphaOutputTuple: ...

class FuncData:
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __call__(self, **kwargs) -> Any: ...

class Func:
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...
    def __call__(self, **kwargs) -> Any: ...

class RawCallbackData:
    def __init__(
        self,
        node: VideoNode,
        env: EnvironmentData,
        callback: Callable[[VideoNode, int, Union[VideoNode, Error]], None] = None,
    ): ...
    def for_future(
        self,
        future: Future[VideoNode],
        wrap_call: Callable[[Callable[[Union[VideoNode, Error]], None], Union[VideoNode, Error]], None] = None,
    ): ...
    def handle_future(
        self,
        node: VideoNode,
        n: int,
        result,
    ) -> None: ...
    def receive(self, n: int, result: Union[VideoNode, Error]) -> None: ...

class CallbackData(object):
    def __init__(self, fileobj, requested: int, total: int, num_planes: int, y4m: bool, node: VideoNode, progress_update: Callable[[int, int], None]) -> None: ...

class FramePtr:
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...

class Format:
    id: int
    name: str
    color_family: ColorFamily
    sample_type: SampleType
    bits_per_sample: int
    bytes_per_sample: int
    subsampling_w: int
    subsampling_h: int
    num_planes: int
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def replace(self, core: Core = None, **kwargs) -> Format: ...
    def __eq__(self, other: Format) -> bool: ...
    def __int__(self) -> int: ...
    def __str__(self) -> str: ...

class VideoProps:
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...
    def __contains__(self, name: str) -> bool: ...
    def __getitem__(self, name: str) -> Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]: ...
    def __setitem__(self, name: str, value: Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]) -> None: ...
    def __delitem__(self, name: str) -> None: ...
    def __setattr__(self, name: str, value: Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]): ...
    def __delattr__(self, name: str) -> None: ...
    def __getattr__(self, name: str): ...
    def keys(self) -> Set[str]: ...
    def values(self) -> Set[Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]]: ...
    def items(self) -> Set[Tuple[str, Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]]]: ...
    def get(self, key: str, default: Any = None) -> Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]: ...
    def pop(self, key: str, default: Any = []) -> Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]: ...
    def popitem(self) -> Tuple[str, Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]]: ...
    def setdefault(
        self, key: str, default=Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]
    ) -> Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]: ...
    def update(self, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def copy(self) -> Dict[str, Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]]: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __dir__(self) -> List[str]: ...
    def __repr__(self) -> str: ...

class VideoFrame:
    format: Format
    width: int
    height: int
    readonly: bool
    props: VideoProps
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...
    def copy(self) -> VideoFrame: ...
    def get_read_ptr(self, plane: int) -> c_void_p: ...
    def get_read_array(self, plane: int) -> memoryview: ...
    def get_write_ptr(self, plane: int) -> c_void_p: ...
    def get_write_array(self, plane: int) -> memoryview: ...
    def get_stride(self, plane: int) -> int: ...
    def planes(self) -> Iterator[VideoPlane]: ...
    def __str__(self) -> str: ...

class VideoPlane:
    width: int
    height: int
    def __cinit__(self, frame: VideoFrame, plane: int) -> None: ...
    def __getbuffer__(self, view: memoryview, flag: int) -> None: ...

class VideoNode:
    format: Format
    width: int
    height: int
    num_frames: int
    fps_num: int
    fps_den: int
    fps: Fraction
    flags: int
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...
    def __getattr__(self, name: str) -> Plugin: ...
    def get_frame(self, n: int) -> VideoFrame: ...
    @overload
    def get_frame_async_raw(
        self: VideoNode,
        n: int,
        cb: Callable[[VideoNode, int, Union[VideoNode, Error]], None],
    ) -> Future[VideoNode]: ...
    @overload
    def get_frame_async_raw(
        self: VideoNode,
        n: int,
        cb: Future[VideoNode],
        future_wrapper: Callable[[Callable[[Union[VideoNode, Error]], None], Union[VideoNode, Error]], None] = None,
    ) -> Future[VideoNode]: ...
    def get_frame_async(self: VideoNode, n: int) -> Future[VideoNode]: ...
    def set_output(self, index: int = 0, alpha: VideoNode = None, alt_output: int = 0) -> None: ...
    def output(
        self,
        fileobj: BinaryIO,
        y4m: bool = False,
        progress_update: Callable[[int, int], None] = None,
        prefetch: int = 0,
        backlog: int = -1,
    ) -> None: ...
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __add__(self, right: VideoNode) -> VideoNode: ...
    def __radd__(self, left: VideoNode) -> VideoNode: ...
    def __mul__(self, right: int) -> VideoNode: ...
    def __rmul__(self, left: int) -> VideoNode: ...
    def __getitem__(self, val: Union[int, slice]) -> VideoNode: ...
    def frames(self, prefetch: int = None, backlog: int = None) -> Iterator[VideoNode]: ...
    def __dir__(self) -> List[Plugin]: ...
    def __len__(self) -> int: ...
    def __str__(self) -> str: ...

# inject VideoNode plugins

class Core:
    add_cache: bool
    num_threads: int
    max_cache_size: int
    def __cinit__(self) -> None: ...
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __dealloc__(self) -> None: ...
    def __getattr__(self, name: str) -> Plugin: ...
    def set_max_cache_size(self, mb: int) -> None: ...
    def get_plugins(self) -> Dict[str, Dict[str, Union[str, Dict[str, str]]]]: ...
    def list_functions(self) -> str: ...
    def register_format(
        self,
        color_family: ColorFamily,
        sample_type: SampleType,
        bits_per_sample: int,
        subsampling_w: int,
        subsampling_h: int,
    ) -> Format: ...
    def get_format(self, id: Union[int, PresetFormat, Format]) -> Format: ...
    def version(self) -> str: ...
    def version_number(self) -> int: ...
    def __dir__(self) -> List[Plugin]: ...
    def __str__(self) -> str: ...

# inject Core plugins

def get_core(threads: int = None, add_cache: bool = None) -> Core: ...

class _CoreProxy(Core):
    core: Core
    def __init__(self) -> None: ...
    def __dir__(self) -> List[str]: ...
    def __getattr__(self, name: str) -> Plugin: ...
    def __setattr__(self, name: str, value: Union[int, float, str, bytes, bytearray, VideoNode, VideoFrame, Func]): ...

core = _CoreProxy.__new__(_CoreProxy)

class Plugin:
    namespace: str
    __doc__: str
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __getattr__(self, name: str) -> Function: ...
    def functions(self) -> Iterator[Function]: ...
    def get_functions(self) -> Dict[str, str]: ...
    def list_functions(self) -> str: ...
    def __dir__(self) -> List[str]: ...

class Function:
    plugin: Plugin
    name: str
    signature: str
    return_signature: str
    __signature__: Signature
    def __init__(self):
        raise Error("Class cannot be instantiated directly")
    def __call__(self, *args, **kwargs) -> Any: ...

class VSScriptEnvironmentPolicy:
    def __init__(self) -> None: ...
    def on_policy_registered(self, policy_api: EnvironmentPolicyAPI) -> None: ...
    def on_policy_cleared(self) -> None: ...
    def get_current_environment(self) -> EnvironmentData: ...
    def set_environment(self, environment: EnvironmentData) -> EnvironmentData: ...
    def is_alive(self, environment: EnvironmentData) -> bool: ...
